name: Test Service

on:
  workflow_call:
    inputs:
      # for all tests
      service-name:
        required: true
        type: string
      registry: 
        required: true
        type: string
      commit_hash:
        required: true
        type: string
      test_port:
        required: true
        type: string
      container_port:
        required: true
        type: string
      change_tag:
        required: true
        type: boolean
    
      # For HTTP tests
      http_healthcheck:
        required: false
        default: false
        type: boolean
      healthcheck_path:
        required: false
        type: string

      # For gRPC tests
      grpc_healthcheck:
        required: false
        default: false
        type: boolean
      proto_file_dir:
        required: false
        type: string
      proto_file_name:
        required: false
        type: string

    secrets:
      DOCKER_HUB_ACCESS_KEY:
        required: true

env:
  TEST_DELAY: "5"
  TEST_RETRIES: "5"

jobs:
  pull-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # Comment Log in to Docker Hub step if repo is public
      - name: Log in to Docker Hub
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1 # docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_KEY }}
      
      - name: Checkout repo for find proto file(gRPC test)
        id: checkout
        if: ${{ inputs.grpc_healthcheck }}
        uses: actions/checkout@v4

      - name: Pull ${{ inputs.service-name }} Docker image from Docker Hub
        run: |
          docker pull ${{ inputs.registry }}/${{ inputs.service-name }}:${{ inputs.commit_hash }}
        
      - name: Run ${{ inputs.service-name }} container
        run: |
          docker run --name frontend \
          -p ${{ inputs.test_port }}:${{ inputs.container_port }} \
          --name ${{ inputs.service-name }} \
          --user 1000:1000 \
          --cap-drop=ALL \
          --memory="128m" \
          --cpus="0.2" \
          -e PORT=${{ inputs.container_port }} \
          -e PRODUCT_CATALOG_SERVICE_ADDR=localhost:3550   \
          -e CURRENCY_SERVICE_ADDR=localhost:7000   \
          -e CART_SERVICE_ADDR=localhost:7070   \
          -e RECOMMENDATION_SERVICE_ADDR=localhost:8080   \
          -e SHIPPING_SERVICE_ADDR=localhost:50051   \
          -e CHECKOUT_SERVICE_ADDR=localhost:5050   \
          -e AD_SERVICE_ADDR=localhost:9555   \
          -e SHOPPING_ASSISTANT_SERVICE_ADDR=localhost:80 \
          -e ENABLE_PROFILER=0 \
          -d  \
          ${{ inputs.registry }}/${{ inputs.service-name }}:${{ inputs.commit_hash }}

      - name: Wait until HTTP status is 200
        id: http-test
        if: ${{ inputs.http_healthcheck }}
        run: |
          echo: "Starting HTTP test"
          URL="http://localhost:${{ inputs.test_port }}/${{ inputs.healthcheck_path }}"
          RETRIES=${{ env.TEST_RETRIES }}
          DELAY=${{ env.TEST_DELAY }}
          
          for ((i=1; i<=RETRIES; i++)); do
            set +e
            STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" $URL)
            set -e
            echo "Attempt $i: HTTP status $STATUS"
            
            if [ "$STATUS" -eq 200 ]; then
              echo "Service is up!"
              exit 0
            fi
            
            echo "Waiting for $DELAY seconds..."
            sleep $DELAY
          done
          
          echo "Service did not respond with HTTP 200 after $((RETRIES * DELAY)) seconds."
          exit 1

      - name: Grpc test
        id: grpc-test
        if: ${{ inputs.grpc_healthcheck }}
        run: |
          echo "Starting gRPC test"
          RETRIES=${{ env.TEST_RETRIES }}
          DELAY=${{ env.TEST_DELAY }}
          for ((i=1; i<=RETRIES; i++)); do
            set +e
            docker run --rm -v ${{ inputs.proto_file_dir }}:/protos fullstorydev/grpcurl -plaintext -import-path /protos -proto ${{ inputs.proto_file_name }} $(docker inspect ${{ inputs.service-name }} | jq -r '.[0].NetworkSettings.IPAddress'):${{ inputs.test_port }} list
            RESULT=$?
            set -e
            
            if [ $RESULT -eq 0 ]; then
              echo "Service is up!"
              exit 0
            fi
            
            echo "Waiting for $DELAY seconds..."
            sleep $DELAY
          done
          
          echo "Service did not respond after $((RETRIES * DELAY)) seconds."
          exit 1



  change-tag-to-latest:
    
    needs: pull-and-test
    runs-on: ubuntu-latest
    
    if: ${{ inputs.change_tag }}

    defaults:
      run:
        shell: bash
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1 # docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_KEY }}

      - name: Pull the image with commit hash
        run: |
          docker pull ${{ inputs.registry }}/${{ inputs.service-name }}:${{ inputs.commit_hash }}
  
      - name: Tag the image as latest
        run: |
          docker tag ${{ inputs.registry }}/${{ inputs.service-name }}:${{ inputs.commit_hash }} \
          ${{ inputs.registry }}/${{ inputs.service-name }}:latest
  
      - name: Push the latest tag to Docker Hub
        run: |
          docker push ${{ inputs.registry }}/${{ inputs.service-name }}:latest
          